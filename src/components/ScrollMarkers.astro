---
let html = await Astro.slots.render('default');
let i = 1;
html = html.replaceAll('<li', () => `<li style="--i:${i++}"`)
---
<script>
	class ScrollMarkers extends HTMLElement {
		connectedCallback() {
			const content = this.closest('.scroll-markers-content') || document.querySelector('.scroll-markers-content');
			if (!content) {
				return;
			}
			// Apply intersection observers to headers
			// Do I need to have sticky position for an invisible content inside of them in order to replicate the always triggered mechanic of the SDA?
			// Once I know the current header index, I apply it to `this`.
			const headerMap: Set<Element> = new Set();
			const headers = [...content.querySelectorAll(':scope > :is(h2, h3, h4, h5, h6)')];
			let disconnectOldObserver = () => {};
			const addObserver = (vh?: number) => {
				if (!vh) {
					return;
				}
				disconnectOldObserver();
				const observer = new IntersectionObserver((entries) => {
					for (const entry of entries) {
						if (entry.isIntersecting) {
							headerMap.add(entry.target);
						} else {
							headerMap.delete(entry.target);
						}
					}
					const maxIndex = [...headerMap.values()].map(header => headers.indexOf(header)).toSorted((a, b) => b - a)[0] || 0;
					this.style.setProperty('--current-header', String(maxIndex + 1));
				}, {
					// 200px is the same as in scroll-markers.css and is an
					// abstract value that should be just higher than
					// the header height.
					rootMargin: `200px 0px -${vh / 2}px 0px`,
				});
				for (const header of headers) {
					observer.observe(header);
				}
				disconnectOldObserver = () => observer.disconnect();
			}
			let oldHeight = window.innerHeight;
			addObserver(oldHeight);
			window.addEventListener('resize', () => {
				const newHeight = window.innerHeight;
				if (newHeight === oldHeight) {
					return;
				}
				addObserver(newHeight);
			});
		}
	}
	if (!CSS.supports('timeline-scope', '--foo')) {
		customElements.define('scroll-markers', ScrollMarkers);
	}
</script>

<scroll-markers set:html={html}></scroll-markers>
