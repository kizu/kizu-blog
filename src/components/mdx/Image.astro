---
import type { ImageMetadata } from "astro";
import type { HTMLAttributes } from 'astro/types';
import { Image as AstroImage } from 'astro:assets';
import { photoData } from '@content/photos/_photoData';
import { MAIN_CAMERA, MAIN_LENS } from "@lib/expandPhotoData";

interface Props extends Omit<HTMLAttributes<'img'>, 'src'> {
	src: ImageMetadata | `pixelfed:${string}`,
}

const { src, alt = null } = Astro.props;

const pixelfedUrlMatch =
	typeof src === 'string' && src.match(/^pixelfed:(.+)$/) || undefined;
const pixelfedId = pixelfedUrlMatch?.[1];

const getPixelfedImage = (pixelfedSrc?: string) => {
	if (!pixelfedSrc) {
		return;
	}
	const [, lookup, num1, num2] =
		pixelfedSrc.match(/^([^\/]+)(?:\/(\d+))?(?:\/(\d+))?$/) || [];
	if (!lookup) {
		return;
	}

	const flatPhotoList = photoData.flatMap(photoOrGroup => {
		if (!photoOrGroup.photos) {
			return photoOrGroup;
		} else {
			return [photoOrGroup, ...photoOrGroup.photos];
		}
	})

	const foundItem =
		// First, check if there is anything with the matching id.
		flatPhotoList.find((photoOrGroup) => photoOrGroup.id === lookup)
		// Else, check other fields
		|| flatPhotoList.find((photoOrGroup) =>
			photoOrGroup.date === lookup
			|| photoOrGroup.url?.includes(lookup)
			|| photoOrGroup.name?.includes(lookup)
		);

	const firstIndex = num1 ? Number(num1) - 1 : 0;
	const secondIndex = num2 ? Number(num2) - 1 : 0;

	if (!foundItem) {
		return;
	}

	const foundPhoto = foundItem?.photos
		? foundItem.photos[firstIndex].data?.photos[secondIndex]
		: foundItem.data?.photos[firstIndex];

	return foundPhoto;
}

const pixelfedPhoto = getPixelfedImage(pixelfedId);

// TODO: Maybe use the caption or something else?
const id = pixelfedId?.replace(/[^\w\d]+/g, '-');

let formattedDate = '';
if (pixelfedPhoto?.post.created_at) {
	formattedDate = new Intl.DateTimeFormat('en-GB', {
		dateStyle: 'full',
	}).format(new Date(pixelfedPhoto.post.created_at))
}

---

{typeof src === 'string'
	? pixelfedPhoto
		? ((img) => alt && pixelfedPhoto.alt ? (
			<div
				class="photo-frame-container" id={`${id}--full`}
				style={`
					--width: ${pixelfedPhoto.width}px;
					--ratio: ${(pixelfedPhoto.width || 1) / (pixelfedPhoto.height || 1)};
				`}
			>
				<figure class="photo-frame">
					{img}
					<figcaption>
						{alt}
						<nav>
							<a href={`#${id}--full`}>See details</a>
							<a href={`#${id}`}>Back to the post</a>
						</nav>
					</figcaption>
				</figure>
				<dl class="photo-details">
					<dt>Published:</dt>
					<dd>
						<time datetime={pixelfedPhoto.post.created_at}>{formattedDate}</time>
						{' '}
						<a href={pixelfedPhoto.post.url}>on Pixelfed</a>
					</dd>
					<dt>Alt:</dt>
					<dd>{pixelfedPhoto.alt}</dd>
					<dt>Camera:</dt>
					<dd>{MAIN_CAMERA}</dd>
					<dt>Lens:</dt>
					<dd>{MAIN_LENS}</dd>
				</dl>
			</div>
		) : (
			img
		))(<img
			id={id}
			class="photo"
			src={pixelfedPhoto.url}
			alt={pixelfedPhoto.alt || alt}
			width={pixelfedPhoto.width}
			height={pixelfedPhoto.height}
			loading="lazy"
		/>)
		: <aside class="warning">There shouldâ€™ve been an image, but something went wrong!</aside>
	: <AstroImage src={src} alt={alt} />}

