@import './features/scroll-markers.css';
@import './features/debug.css';

html {
	scrollbar-gutter: stable;
	color-scheme: light dark;
	font-synthesis: none;
	scroll-padding: var(--MIN-CONTENT-PADDING);

	--CONTENT-WIDTH: 48rem;
	--MAX-LAYOUT-WIDTH: calc(2.5 * var(--CONTENT-WIDTH));
	--ASIDE-WIDTH: 16rem;
	--MIN-CONTENT-PADDING: 16px;
	--DOUBLE-PADDING: calc(2 * var(--MIN-CONTENT-PADDING));
	--MAX-CONTENT-PADDING: 6rem;
	--MAX-PAGE-WIDTH: calc(
		var(--CONTENT-WIDTH)
		+
		2 * var(--MAX-CONTENT-PADDING)
	);
	--FONT-SIZE--SMALL: 0.8em;
	--BG-FROM:
		var(--LIGHT, oklch(0.94 0.11 175.71))
		var(--DARK, oklch(0.28 0.08 170.93));
	--BG-TO:
		var(--LIGHT, oklch(0.99 0.01 68))
		var(--DARK, oklch(0.12 0.03 86.71));
	--CONTENT-BG:
		var(--LIGHT, oklch(0.99 0.03 120.64))
		var(--DARK, oklch(0.2 0.05 219.22));
	--CONTENT-SHADOW:
		var(--LIGHT, oklch(0.43 0.2 339.3))
		var(--DARK, oklch(0.67 0.15 190.98));
	--TEXT-COLOR:
		var(--LIGHT, oklch(0.3 0.09 43.54))
		var(--DARK, oklch(0.87 0.04 106.07));

	--CODE-SHADOW: oklch(0.43 0.2 339.3);

	--BORDER-RADIUS: 0.5rem;

	--PINK:
		var(--SRGB,
			var(--LIGHT, pink)
			var(--DARK, darkmagenta)
		)
		var(--OKLCH,
			var(--LIGHT, oklch(0.89 0.08 1.1))
			var(--DARK, oklch(0.45 0.2 347.15))
		);
	--GREEN:
		var(--SRGB,
			var(--LIGHT, lightgreen)
			var(--DARK, forestgreen)
		)
		var(--OKLCH,
			var(--LIGHT, oklch(0.9 0.19 155.57))
			var(--DARK, oklch(0.36 0.11 161.84))
		);
	--RED:
		var(--SRGB,
			var(--LIGHT, #e60000)
			var(--DARK, #ff9f9f)
		)
		var(--OKLCH,
			var(--LIGHT, oklch(0.57 0.26 29.49))
			var(--DARK, oklch(0.82 0.13 18.64))
		);

	--BLUE:
		var(--SRGB,
			var(--LIGHT, #0068b7)
			var(--DARK, #4dc4ff)
		)
		var(--OKLCH,
			var(--LIGHT, oklch(0.5 0.16 244.86))
			var(--DARK, oklch(0.76 0.14 236.26))
		);
	--PURPLE:
		var(--SRGB,
			var(--LIGHT, #48009e)
			var(--DARK, #dcb3ff)
		)
		var(--OKLCH,
			var(--LIGHT, oklch(0.36 0.21 292.21))
			var(--DARK, oklch(0.83 0.12 306.88))
		);

	/* Space toggles for the dark/light mode. */
	--LIGHT: initial;
	--DARK: ;

	/* Space toggles for the oklch support. */
	--SRGB: initial;
	--OKLCH: ;

	--min-aside-width: 0px;

	background-image: radial-gradient(
		farthest-corner circle at 50% 50%
		,
		var(--BG-FROM)
		min(0.5 * var(--MAX-PAGE-WIDTH), 62vmin)
		,
		var(--BG-TO)
		100%
	);
	background-attachment: fixed;
	hyphens: auto;
	/* Disabled, as I don't like how snapping works everywhere except Firefox */
	scroll-snap-type: y proximity;
}
@media (prefers-color-scheme: dark) {
	html {
		--LIGHT: ;
		--DARK: initial;
	}
}

@supports (color: oklch(0.89 0.2 166.25)) {
	:root {
		--SRGB: ;
		--OKLCH: initial;
	}
}

/* Not implemented yet */
/*
html:has(#theme-light:checked) {
	--LIGHT: initial;
	--DARK: ;
	color-scheme: light;
}

html:has(#theme-dark:checked) {
	--LIGHT: ;
	--DARK: initial;
	color-scheme: dark;
}
*/

.root-container {
	container: --root / inline-size;
}

.root-grid {
	position: relative;
	z-index: 0;
	display: grid;
	max-width: var(--MAX-LAYOUT-WIDTH);
	margin-inline: auto;
	--left-col: minmax(0px, 1fr);
	--content-col: minmax(
		0px,
		calc(
			var(--MAX-PAGE-WIDTH)
			-
			2 * var(--content-padding)
		)
	);
	--right-col: minmax(var(--min-aside-width), 1fr);
	grid-template:
		" --full --full --full    --full --full "
		" .      --page --page    --page .      "
		" .      .      --content .      .      "
		/ var(--left-col)
		         var(--content-padding)
				        var(--content-col)
						          var(--content-padding)
		                                 var(--right-col);
		;
	box-sizing: border-box;
	min-height: 100vh;
	--content-padding: calc(
		var(--MIN-CONTENT-PADDING)
		+
		clamp(
			0px,
			0.5 * (100vw - var(--CONTENT-WIDTH)),
			var(--MAX-CONTENT-PADDING)
		)
	);
	--overhang: clamp(
		0px,
		var(--content-padding) - var(--MIN-CONTENT-PADDING),
		0.5em
	);

	--FONT-SIZE--BODY: 1.5rem;
	--LINE-HEIGHT--BODY-UNITLESS: 1.6;
	--line-height--body: calc(
		var(--FONT-SIZE--BODY)
		*
		var(--LINE-HEIGHT--BODY-UNITLESS)
	);
	--text-indent: clamp(
		var(--FONT-SIZE--BODY),
		var(--content-padding),
		var(--line-height--body)
	);

	font-size: var(--FONT-SIZE--BODY);
	/* https://modernfontstacks.com/ */
	font-family:
		'Iowan Old Style',
		'Palatino Linotype',
		'URW Palladio L',
		P052,
		/* To use the sans-serif version for the `music` fields. */
		/* Taken from https://stackoverflow.com/a/14573813/885556 */
		'Hiragino Kaku Gothic ProN',
		Osaka,
		'メイリオ',
		Meiryo,
		'ＭＳ Ｐゴシック',
		'MS PGothic',
		serif;

	color: var(--TEXT-COLOR);

	--aside-limit: max(0px, var(--MAX-PAGE-WIDTH) + var(--ASIDE-WIDTH) - 100cqw);
	--captured-length: calc(var(--aside-limit));
	--captured-number: min(1,
		round(up, tan(atan2(var(--captured-length), 1px)), 1)
	);
	--has-no-aside: var(--captured-number);
	--has-aside: calc(1 - var(--has-no-aside));

	--toc-limit: max(0px, var(--MAX-PAGE-WIDTH) + (var(--ASIDE-WIDTH) * 1.75) - 100cqw);
	--captured-length2: calc(var(--toc-limit));
	--captured-number2: min(1,
		round(up, tan(atan2(var(--captured-length2), 1px)), 1)
	);
	--has-no-toc: var(--captured-number2);
	--has-toc: calc(1 - var(--has-no-toc));

	--aside-column-start: calc(4 - 1 * var(--has-no-aside));
	--aside-column-end: calc(6 - 2 * var(--has-no-aside));
	--aside-column:
		var(--aside-column-start) /
		var(--aside-column-end);

	--toc-column-start: calc(1 + 2 * var(--has-no-toc));
	--toc-column-end: calc(3 + 1 * var(--has-no-toc));
	--toc-column:
		calc(
			var(--toc-column-start)*var(--has-toc)
			+
			var(--aside-column-start)*var(--has-no-toc)
		) /
		calc(
			var(--toc-column-end)*var(--has-toc)
			+
			var(--aside-column-end)*var(--has-no-toc)
		);

	:where(&) > *,
	:where(&) > astro-island > * {
		grid-column: --content;
		margin: 0;
	}

	&:has(.aside-wrapper, aside > details) {
		--min-aside-width: calc(var(--ASIDE-WIDTH) * var(--has-aside));
	}

	/* For browsers that do not support `round()` move the asides into content area. */
	@supports not (width: round(1px, 1px)) {
		--has-no-aside: 1;
		--has-aside: 0;
		--has-no-toc: 1;
		--has-toc: 0;
	}
}

@property --captured-length {
	syntax: "<length>";
	initial-value: 0px;
	inherits: true;
}

@property --captured-number {
	syntax: "<number>";
	initial-value: 1;
	inherits: true;
}

@property --captured-length2 {
	syntax: "<length>";
	initial-value: 0px;
	inherits: true;
}

@property --captured-number2 {
	syntax: "<number>";
	initial-value: 1;
	inherits: true;
}

body {
	margin: 0;
}

header {
	display: grid;
	align-content: center;
	--ratio: 0.5;
	min-block-size: calc(var(--ratio) * var(--MAX-CONTENT-PADDING));
	/* Disabled, as I don't like how snapping works everywhere except Firefox */
	/* scroll-snap-align: start; */

	& > h1 {
		font-size: 2em;
		margin: 0;
		text-shadow:
			var(--DARK, 0 -2px 2px #000)
			var(--LIGHT, 0 1px 0.5px #FFF);
	}

	&:has(> h1) {
		--ratio: 1;
	}

	/* Otherwise, on page load, if there is a photo on the page, the page will center on it. */
	/* Disabled, as I don't like how snapping works everywhere except Firefox */
	/* body:has(img.photo) > * > * > & {
		scroll-snap-align: start;
	} */
}

footer {
	color: var(--mix);
	--mix-alpha: 0.8;
}

h1 {
	font-size: 1.75em;
	line-height: 1.2;
	font-weight: 800;
	letter-spacing: 0.025em;
	font-variant-caps: petite-caps;
}

h2 {
	font-size: 1.25em;
	margin-block-start: 1lh;
}

h3,
h4,
h5,
h6 {
	font-size: 1.1em;
	font-weight: 900;
	margin-block-start: 0.5lh;
	margin-block-end: -0.5lh;
}

h4,
h5,
h6 {
	font-size: 1em;
	font-style: italic;
	letter-spacing: 0.015em;
}

h5,
h6 {
	font-weight: 600;
}

main > article {
	position: relative;
	z-index: 0;
	padding-block-start: calc(0.5 * var(--MAX-CONTENT-PADDING));
	padding-block-end: var(--MAX-CONTENT-PADDING);
}
main > article::before {
	content: "";
	grid-column: --page;
	position: absolute;
	inset: 0;
	z-index: -1;
	background: var(--CONTENT-BG);
	box-shadow: 0 0 1rem -0.6rem var(--CONTENT-SHADOW);
	border-radius: var(--BORDER-RADIUS);
}

main,
article {
	display: grid;
	grid-template-columns: subgrid;
	grid-column: --full;
	--gap: 1em;
	gap: var(--gap) 0;

	:where(&) > *,
	:where(&) > astro-island > * {
		grid-column: --content;
		margin: 0;
	}
}

/* Just make it present, but not be shown, resulting in an extra whitespace. */
hr {
	inline-size: auto;
	border: none;
}

code {
	font: inherit;
	white-space: pre-wrap;
	tab-size: 2;
	word-break: keep-all;
}

:not(pre) > code,
blockquote {
	font-style: italic;
}

:not(pre) > code {
	/* Slightly more readable */
	letter-spacing: 0.015em;

	/* Do not change the color when inside a link. */
	&:not(a[href] *){
		/* Trying to make it stand out a bit more, differentiating from `em`, and bringing a bit more attention than for a regular emphasis. */
		color: var(--link-color, var(--RED));
	}
}

:is(blockquote, figcaption) :is(code, em) {
	font-style: normal;
	letter-spacing: 0;
}

blockquote {
	text-wrap: balance;
	margin-inline: 0;
	padding-inline-start: var(--text-indent);

	& > * {
		--content-padding: var(--DOUBLE-PADDING);
	}

	& > *:only-child {
		margin: 0;
	}
}

iframe {
	border: none;
}

video {
	max-inline-size: 100%;
	block-size: auto;
}

h1, h2, h3, h4, h5, h6 {
	text-wrap: balance;
	line-height: 1.1;
}

p, li, dd {
	line-height: var(--LINE-HEIGHT--BODY-UNITLESS);
	text-wrap: pretty;
	font-variant-numeric: oldstyle-nums;

	/* Inside links we often have capitalized contexts, so we want to restore the digits. */
	& a[href],
	/* We want the code blocks to have more recognizable numbers as well. */
	& code,
	/* Same for the first letter, so we won't start a paragraph from a small letter. Is there a way to extend this to sentences? */
	&::first-letter {
		font-variant-numeric: normal;
	}
}

/* Optically adjust the right edge for most elements, balancing the ragged edge. */
article > :not(figure, pre, aside) {
	margin-inline-end: max(
		-1 * var(--MIN-CONTENT-PADDING),
		var(--MIN-CONTENT-PADDING) - var(--content-padding)
	);
}

:is(article, blockquote) > p:not(.starts-with-tag:has(> img:only-child)) {
	&,
	& + .aside-wrapper {
		& + p:not(.starts-with-tag:has(> img:only-child)) {
			margin-block-start: calc(-1 * var(--gap));
			text-indent: var(--text-indent);

			/* Text-indent is inheritable, so we need to reset it. */
			& > * {
				text-indent: 0;
			}
		}
	}
}

li p {
	margin: 0;
}

li + li {
	margin-block-start: 0.25lh;
}

li:has(p) + li {
	margin-block-start: 0.5lh;
}

a[href] {
	padding-block: 0.115em;
	font-weight: 600; /* Slightly better contrast */

	color: var(--BLUE);
	--link-color: var(--BLUE);

	&:visited:not(:hover, :focus-visible) {
		color: var(--PURPLE);
		/* We can't just use the `--link-color` due to the security limitations, so we have to duplicate it. */
		--link-color: var(--PURPLE);
	}
}

a[href],
summary,
u {
	text-decoration-thickness: max(1px, 0.075em);
	text-underline-offset: clamp(2px, 0.075em, 4px);
	/* https://github.com/web-platform-tests/wpt/pull/42940 */
	text-decoration-color: color-mix(in srgb, var(--mix), transparent calc(100% - 100% * var(--decoration-thickness-override, 1)));
	--mix-alpha: 0.5;
}

a[href^='#'],
summary {
	text-decoration-style: dotted;
	--mix-alpha: 0.75;
}

:is(a[href], summary):is(:hover, :focus-visible),
:is(a[href], summary):is(:hover, :focus-visible) > u {
	--mix-alpha: 1;
	/* TODO: Fill a Safari bug: with code elements */
	/* Also, with the mix working, I might not need this. */
	/* text-decoration-thickness: max(1.5px, 0.125em); */
}

summary {
	cursor: pointer;

	/* We need `<u>` inside, as otherwise some browsers won't show the text-decoration */
	& > u {
		text-decoration-style: dotted;
	}
}

summary:focus:not(:focus-visible),
:root:not(:active) label:hover,
label:active {
	-webkit-user-select: none;
	user-select: none;
}

.nowrap {
	&,
	/* Need this, otherwise it is buggy */
	& > * {
		white-space: nowrap;
	}
}

.nou {
	white-space: nowrap;

	&::before,
	&::after {
		content: "\200d"; /* zero-width joiner */
	}

	/* A good case for `::content` */
	& > span {
		display: inline-block;
	}
}

a[href].is-inherited {
	font-variant-numeric: oldstyle-nums;

	&:not(:hover, :focus-visible) {
		all: unset;
		font-variant-numeric: oldstyle-nums;
		font-weight: 600;
		color: inherit;
	}
}

[hidden] {
	display: none;
}

.is-inline-block {
	display: inline-block;
	max-inline-size: 100%;
}

ul, ol {
	padding: 0;
	padding-inline-start: calc(
		3 * var(--MIN-CONTENT-PADDING)
		-
		var(--content-padding)
	);
}


:is(ul, ol):has(
	> li.starts-with-tag > a.has-left-overhang:first-child,
	> li.starts-with-tag > p.starts-with-tag:first-child > a.has-left-overhang:first-child
) li {
	padding-inline-start: var(--overhang);
	margin-inline-start: calc(-1 * var(--overhang));
}

li.starts-with-tag:has(
	> a.has-left-overhang:first-child,
	> p.starts-with-tag:first-child > a.has-left-overhang:first-child
) {
	& > a.has-left-overhang:first-child,
	& > p.starts-with-tag:first-child > a.has-left-overhang:first-child {
		margin-inline-start: calc(-1 * var(--overhang));
	}
}

:is(ul, ol) ul {
	padding-block: 0.25em;
	padding-inline-start: calc(1.25 * var(--MIN-CONTENT-PADDING));
}

:is(ul, ol) ol {
	padding-block: 0.5em;
	padding-inline-start: calc(1.5 * var(--MIN-CONTENT-PADDING));
}

dl {
	display: grid;
	grid-template: "dt dd" / auto 1fr;
	gap: 0 var(--text-indent);
	align-items: baseline;
	font-size: var(--FONT-SIZE--SMALL);
	padding-inline-start: var(--text-indent);

	color: var(--mix);
	--mix-alpha: 0.8;

	blockquote > & {
		grid-template:
			" dt dt dt "
			" .  dd dd " /
			var(--text-indent) 1fr 1fr;
	}
}

dt {
	font-weight: 600;
	grid-column: dt;
}

dd {
	margin: 0;
	grid-column: dd;
}

/* Kinda a mixin */
*,
*::before,
*::after,
*::marker {
	--mix-color: currentColor;
	--mix-alpha: 100%;
	--mix: color-mix(
		/* oklch is buggy in Safari for now with this method */
		in srgb,
		var(--mix-color) calc(100% * var(--mix-alpha)),
		transparent
	);
}

ul > li::marker {
	color: var(--mix);
	--mix-alpha: 0.8;
	line-height: 1; /* It uses a diff font */
}

ul ul > li::marker {
	--mix-alpha: 100%;
}

img {
	max-inline-size: 100%;
	height: auto;

	&.photo {
		display: block;
		width: auto;
		max-block-size: min(100vh, 100cqw);
		margin-inline: auto;
		/* Disabled, as I don't like how snapping works everywhere except Firefox */
		/* scroll-snap-align: center; */

		p:has(> &) {
			container-type: inline-size;
		}
	}
}

p.starts-with-tag > img:only-child {
	display: block;
}

p.starts-with-tag:has(> img:only-child) {
	margin-inline: calc(-1 * var(--content-padding));
}

figure {
	display: grid;
	position: relative;
	isolation: isolate;
	--padding: var(--MIN-CONTENT-PADDING);
	padding: var(--padding);
	margin: 0;
	container-type: inline-size;
	max-inline-size: calc(1px * var(--width) / 2 + 2 * var(--padding));

	--content-padding: 0px;

	&::after {
		content: "";
		position: absolute;
		z-index: -1;
		inset-block: calc(-1 * var(--padding));
		inset-inline: 0;
		grid-row: 1 / 99;
		outline: 1px solid var(--BLUE);
		border-radius: var(--BORDER-RADIUS);
		opacity: 0.5;
	}

	&:not(:has( > figcaption))::after {
		inset-block-end: 0;
	}
}

figcaption {
	font-size: var(--FONT-SIZE--SMALL);
	font-style: italic;
	grid-row: 99;
	margin-block-start: var(--padding);
	padding-block-start: calc(0.5 * var(--MIN-CONTENT-PADDING));
	padding-inline: min(
		var(--MIN-CONTENT-PADDING),
		var(--text-indent) - var(--padding)
	);
	text-wrap: balance;

	& > p {
		margin: 0;
	}
}


pre {
	max-inline-size: 100cqi;
	padding: var(--MIN-CONTENT-PADDING);
	padding-inline: max(
		var(--MIN-CONTENT-PADDING),
		0.5 * var(--content-padding)
	);
	margin-inline: calc(-0.5 * var(--content-padding));
	margin-block: var(--MIN-CONTENT-PADDING);
	box-shadow: 0 0.1em 0.7rem -0.5rem var(--CODE-SHADOW);
	font-size: clamp(0.5em, 3vw + 0.25em, 0.88em);
	line-height: 1.5;
}

:where(:not(figure)) > :not(h2,h3,h4,h5,h6) + pre {
	inline-size: fit-content;
	justify-self: center;
}

li > pre {
	max-inline-size: 100%;
	box-sizing: border-box;
	--content-padding: var(--DOUBLE-PADDING);
}

figure > pre {
	box-sizing: content-box;
	margin-block-end: 0;
	margin-inline: min(calc(-1 * var(--padding)), 0px);
	border-radius: 0;
}

figure > *:nth-last-child(1 of :not(style, figcaption)) {
	margin-block-end: 0;
}

figure > pre:nth-last-child(1 of :not(style, figcaption)) {
	margin-block-end: min(calc(-1 * var(--padding)), 0px);
	border-end-start-radius: calc(var(--BORDER-RADIUS) + 1px);
	border-end-end-radius: calc(var(--BORDER-RADIUS) + 1px);
}

figure > pre:nth-child(1 of :not(style)) {
	margin-block-start: min(calc(-1 * var(--padding)), 0px);
	border-start-start-radius: calc(var(--BORDER-RADIUS) + 1px);
	border-start-end-radius: calc(var(--BORDER-RADIUS) + 1px);
}

pre {
	font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;
	text-align: left;
	white-space: pre-wrap;
	word-spacing: normal;
	word-break: normal;
	word-wrap: normal;
	overflow: auto;
	border-radius: var(--BORDER-RADIUS);
}

*[style*='--C:'] {
	color: var(--C);
}

*[style*='--D:'] {
	color: var(--LIGHT, var(--L)) var(--DARK, var(--D));
}

*[style*='--D-bg:'] {
	background: var(--LIGHT, var(--L-bg)) var(--DARK, var(--D-bg));
}

[class*='require-']::before {
	content:
		"\26A0 \FE0F  Your browser does not support `"
		var(--require-anchor-name,
			var(--require-animation-range,
				var(--require-timeline-scope,
					var(--require-at-scope,
						var(--require-cap,
							var(--require-style-queries))))))
		'`';
	display: block;
	border: 2px dashed #FFCA51;
	padding: 8px;
	margin-block-end: 16px;
	text-align: center;
}

.require-at-scope {
	--require-at-scope: '@scope';
}

.require-style-queries {
	--require-style-queries: '@container style(--variable)';
}

@scope (html) {
	.require-at-scope {
		--require-at-scope: initial;
	}
}

@container not style(--foo: 1) {
	.require-style-queries::before {
		--require-style-queries: initial;
	}
}

@supports not (anchor-name: --foo) {
	.require-anchor-name {
		--require-anchor-name: 'anchor-name';
	}
}

@supports not (anchor-name: --foo) {
	.require-anchor-name {
		--require-anchor-name: 'anchor-name';
	}
}

@supports not (animation-range: entry-crossing) {
	.require-animation-range {
		--require-animation-range: 'animation-range';
	}
}

@supports not (timeline-scope: --foo) {
	.require-timeline-scope {
		--require-timeline-scope: 'timeline-scope';
	}
}

@supports not (opacity: round(5, 2, 1)) {
	.require-round {
		--require-timeline-scope: 'round()';
	}
}

@supports not (margin: 1cap) {
	.require-cap {
		--require-cap: 'cap';
	}
}

sup {
    vertical-align: baseline;
    position: relative;
    font-size: .7em;
    line-height: 1;
	bottom: 1.4ex;
}

@supports (font-variant-position: super) {
	sup {
		bottom: 0px;
		font-size: 1em;
		font-variant-position: super;
	}
}

mastodon-post-info {
	min-height: 9.25rem;
}

aside {
	position: relative;
	display: flow-root;
	--aside-padding: var(--text-indent);
	padding-inline: var(--aside-padding) calc(0.5 * var(--aside-padding));
	font-size: var(--FONT-SIZE--SMALL);
	--aside-color: var(--GREEN);
	background: color-mix(in srgb, var(--aside-color) var(--aside-color-alpha, 10%), var(--aside-backdrop, transparent));
	border-radius: var(--BORDER-RADIUS);
	box-shadow: inset 0 0 0 2px var(--aside-color), var(--aside-shadow, 0 0);

	& > :is(h2, h3, h4, h5, h6):first-child {
		margin-block-start: 1em;
	}

	&.warning {
		--aside-color: var(--RED);
	}

	& > details > summary {
		margin-inline: calc(-1 * var(--aside-padding)) calc(-0.5 * var(--aside-padding));
		padding-block: 0.5lh;
		padding-inline: calc(0.5 * var(--aside-padding));

		&:is([open] > *) {
			border-bottom: 1px solid var(--aside-color);
		}
	}
}

.table-of-contents {
	z-index: calc(-2 * var(--has-aside));
	opacity: calc(0.7 + 0.3 * var(--has-no-aside));
	/* Make the left column if possible -> fallback to the aside column? */
	grid-column: var(--toc-column);
	grid-row: 3 / span 6; /* TODO: make it not break the other aside? */
	max-inline-size: max-content;
	place-self: start;
	position: sticky;
	inset-block-start: calc(var(--MIN-CONTENT-PADDING) - 9999px * var(--has-no-aside));
	--toc-margin: calc(var(--content-padding) + var(--MIN-CONTENT-PADDING));
	margin-inline-start: calc(
		var(--MIN-CONTENT-PADDING) * var(--has-toc)
		+
		var(--toc-margin) * var(--has-aside) * var(--has-no-toc)
	);
	margin-inline-end: calc(
		var(--MIN-CONTENT-PADDING) * var(--has-aside) * var(--has-no-toc)
		+
		var(--toc-margin) * var(--has-toc)
	);

	--aside-color: var(--CONTENT-BG);
	--aside-color-alpha: 0%;
	--aside-backdrop: var(--CONTENT-BG);
	box-shadow: 0 0 1rem -0.6rem var(--CONTENT-SHADOW);

	overflow: auto;
	max-height: calc(
		(100vh - var(--MIN-CONTENT-PADDING)) * var(--has-aside)
		+
		9999px * var(--has-no-aside)
	);

	&::before {
		content: "";
		position: absolute;
		inset-block: 0;
	}

	&:hover,
	&:has(:focus-visible) {
		z-index: 1;
		opacity: 1;
	}

	&:has(> details[open]) {
		--toc-margin: var(--DOUBLE-PADDING);

		transform: translateX(calc(
			(var(--content-padding) - var(--MIN-CONTENT-PADDING)) * var(--has-aside) * var(--has-no-toc)
		));

		&:hover,
		&:has(:focus-visible) {
			transform: translateX(calc(var(--MIN-CONTENT-PADDING) * var(--has-aside) * var(--has-no-toc)));
		}
	}

}

scroll-markers > ul {
	margin-top: 0;

	& li {
		line-height: 1.25;
		text-wrap: balance;
	}
}


/* We need to have a wrapper, so the sticky positionined aside will be contained. Do we need some built-in way to contain a sticky element to its area when inside a grid? */
.aside-wrapper {
	grid-column: var(--aside-column);
	grid-row-end: span var(--span, 1);

	--aside-backdrop: var(--CONTENT-BG);
	box-sizing: border-box;
	inline-size: 100%;
	max-inline-size: max(var(--CONTENT-WIDTH) / 1.5, 100% * var(--has-no-aside));
	min-inline-size: var(--min-aside-width);
	padding-inline: calc(var(--MIN-CONTENT-PADDING) * var(--has-aside));
	pointer-events: none;

	& > aside {
		pointer-events: auto;
		position: sticky;
		inset-block-start: 0;
		--aside-padding: calc(
			var(--DOUBLE-PADDING) * var(--has-aside)
			+
			var(--text-indent) * var(--has-no-aside)
		);
		overflow: auto;
		max-height: calc(
			100vh * var(--has-aside)
			+
			9999px * var(--has-no-aside)
		);
	}
}

/* Right now using because of a Firefox bug with hyphenation. */
.no-ligatures {
	font-feature-settings: "liga" 0, "dlig" 0;
}

#table-of-contents + ul {
	font-size: var(--FONT-SIZE--SMALL);
}
