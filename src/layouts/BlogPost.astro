---
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import MastodonPostInfo from '../components/MastodonPostInfo/MastodonPostInfo.astro';
import MastodonPostInfoTemplate from '../components/MastodonPostInfo/MastodonPostInfoTemplate.astro';
import FormattedDate from '../components/FormattedDate.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';

type Props = Partial<CollectionEntry<'blog'>['data']>;

const {
	title = SITE_TITLE,
	description = SITE_DESCRIPTION,
	pubDate,
	updatedDate,
	heroImage,
	mastodonPostId,
	tags = [],
} = Astro.props;
const { pathname } = Astro.url;

---

<html lang="en">
	<head>
		<BaseHead title={title} description={description} />
	</head>

	<body class="h-entry">
		<MastodonPostInfoTemplate />
		{pathname !== '/' ? <Header /> : null}
		<main>
			<article class="e-content">
				{heroImage && <img width={720} height={360} src={heroImage} alt="" />}
				<h1 class="p-name">{title}</h1>
				<p>
					{pubDate ? <>Published on <a class="u-url u-uid is-inherited" href={Astro.url}><FormattedDate class="dt-published" date={pubDate} /></a>.</> : null}
					{
						updatedDate ? (
							<span>
								Last updated on <FormattedDate class="dt-updated" date={updatedDate} />.
							</span>
						) : null
					}
					{
						tags.length ?(<>
							Categories:
							{tags.map((tag, index) => <>
								{index !== 0 ? ', ' : null}
								<span class="p-category">{tag}</span>
							</>)}.
						</>) : null
					}
				</p>

				<hr />
				<slot />
			</article>
			<MastodonPostInfo mastodonPostId={mastodonPostId} />
		</main>
		<Footer />
	</body>
</html>
